Meeting on irc.gnome.org:#gtk-devel
Meeting started November 23 2004 16:01 EST (21:01 UTC)

In attendence: 

Owen Taylor (owen), Jonathan Blandford (jrb), Manish Singh (yosh), 
Matthias Clasen (mclasen), Tor Lillqvist (tml), John Ehresman (jpe),


<mclasen>	hey 
<mclasen>	I don't know if we have much to discuss today; I have been a bit distracted from gtk+ bugs for the last few days...
<owen>	One thing we could conceivably discuss is my milestorming mail
<owen>	(BTW, the rotated text issue that I said I'd resolve a few weeks ago one way or the other is obviously resolved in favor of not ripping PangoRenderer out)
<mclasen>	ah, right. that is the bugzilla discussion you promised some weeks ago, right ?
<mclasen>	you have ensured that the 2.6 release will be screenshot-worthy...
*	mclasen tries to reread owen milestone mail...evolution hangs...
<owen>	I didn't write *that* much on it ;-)
<mclasen>	tell evolution that
<mclasen>	ok, I guess I have to declare your mail officially lost in evolution...
<owen>	mclasen: mail.gnome.org
<mclasen>	heh, yes, found it there
<mclasen>	i should have googled to begin with...
<mclasen>	so, I like the idea to have a somewhat more finegrained classification a la big feature - small feature - simple fix - need analysis
<mclasen>	but I'm not following on your number of 12 milestones... I only count 9 or 10
<owen>	mclasen: The 3 at the end are abbrevations for two ... one for api, one for feature
<mclasen>	another thing I agree on is that we shouldn't leave bugs with feature-adding patches in limbo just because the bug isn't entirely right, or we are not sure...
<mclasen>	ah, that explains it.
<mclasen>	small/medium/big in those names is an estimate for the amount of work, right ?
<owen>	Actually "Big Feature" is unlikely to appear for GTK+, though it's real for Pango (script addition, mostly)
<owen>	mclasen: Yeah. 
<mclasen>	owen: cairo support, print dialog...no big features ?
<owen>	mclasen: that seemed to be to be the most relevant toplevel classification when trying to figure out what to pull of the stack and do for a particular release. 
<owen>	mclaesen: cairo support, print dialog are "big api"
<owen>	mclasen: "Feature" in my scheme was features without API
<mclasen>	oh, seems I haven't completely mastered the new system yet...
<mclasen>	but you could conceivably have a combination of big feature/little api, no ?
<owen>	mclasen: Well, the idea is "Big API" isn't "Lot's of new API" but rather "Bug with API keyword that is lots of work"
<mclasen>	as in cairo support, where it is conceivable to just add a handful of new apis...
<owen>	mclasen: It's quite likely that for  Big/Medium  the Feature/API distinction isnt' relevant
<mclasen>	ah of course. maybe naming it Big/API would make it clearer
<mclasen>	or Big+API
<owen>	mclasen: For Small it does determine whether a backport to the stable branch is possible. But maybe it's best killed altogether. Backports to stable can always be handled piece by piece
<owen>	s/piece by piece/case by case/
<jody>	owen: your sample rotated text looks odd
<mclasen>	jody: you mean the one in testgtk with a texture ?
<owen>	jody: morten told me that too. The problem is that "Rotate" is in italic
<owen>	mclasen: I think he means my screenshot of the rotated label
<jody>	mclasen: yes
<owen>	jody: Oh, the one in testgtk is I'm pretty sure a server bug.
<owen>	jody: It worked for me for a bit, then started showing random bits of the root window background.
<jody>	owen: sorry, you were right
<jody>	the rotated label
<mclasen>	oh, yes, the amount of italicness seems to vary with angle...
<jody>	Was the Hello World in italics too ?
<owen>	jody: I think it's just an optical illusion
<jody>	The l's in hello had distinct baselines
<mclasen>	jody: i think thats just lack of subpixel positioning
<owen>	jody: What mclasen said
<mclasen>	maybe we can get that too for 2.6, owen ? :-)
<owen>	mclasen: how slow do you want to go?
<owen>	mclasen: (I mean text rendering speed, not 2.6 development...)
<owen>	In the end, really only 90 and 270 are interesting angles for GtkLabel
<mclasen>	oh, we can compensate for that by speeding up utf8_validate() some more...
<owen>	hand written assembly, baby!
<mclasen>	but subpixel positioning would conceivably also improve horizontal text, no ?
<owen>	mclasen: Actually, tends to go along with fuzziness. Good fidelity to print, poor readability
<owen>	http://people.redhat.com/otaylor/grid-fitting/ has screenshots
<mclasen>	so, coming back to the milestone discussion...
<mclasen>	I think the problem of "doesn't look like milestone to reporter" can be solved by some canned comments, which explain what the milestone means
<owen>	I'm thinking - for the question of the "not sure" bugs, maybe we just need to handle them here every week, discuss them, flip a coin, make a decision
<mclasen>	thats what I was about to propose...add a regular agenda item to discuss maybe 5 of those...
<mclasen>	nominations could be sent in during the week, or maybe we could just always discuss the 5 oldest ones...
<owen>	mclasen: I'd suggest we should probably try to discuss incoming new ones every week as well to make sure that we are making forward progress.
<owen>	mclasen: I'm also wondering about the question of a REJECTED_RFE if we start getting more aggressive about rejecting marginal issues, so we can go back and revisit
<owen>	(RESOLVED/WONTFIX is pretty closed to REJECTED_RFE, but not exact)
<owen>	(409 total RESOLVED/WONTFIX bugs for GTK+...)
<mclasen>	owen: WONTFIX on an enhancement request is a pretty good approximation of REJECTED_RFE
<owen>	tml: Any thoughts on the proposed bug process from a win32 perspective? 
<tml>	owen: umm, not really
<mclasen>	oh, while we are talking about backends, we may also spend a minute on the framebuffer backend, maybe
<owen>	tml: the idea is sort of that bugs when they come in can be assigned to a milestone and left there, so hopefully a little less work
<owen>	mclasen: 'cvs rm' is somewhat tempting
<mclasen>	should we declare it as officially unmaintained in 2.6 ? I'm not even sure it compiles
<owen>	mclasen: Well, doesn't at the moment, I'm sure, because I added a new backend function with the rotated text stuff
<mclasen>	at some point it looked as if the direct-fb backend may be a suitable replacement, but that seems never-forthcoming...
<tml>	owen: i can't be more specific yet, but i assume i will be able to do much more work on glib&gtk win32 stuff next year
<owen>	mclasen: Yeah. I guess the main point in having the linux-fb in CVS is the vague hope that someone will pick it up. 
<mclasen>	ok, if nobody objects, I'll probably add some form of deprecation note to the 2.6 release notes, asking for some fearless hacker to keep it alive...
<mclasen>	owen: in your milestone proposal, we would still have per-release 2.6.something milestones, which would just be much less populated, right ?
<owen>	mclasen: Yes, but the point is that 2.6.somtehing milestones would be explicitley populated.
<mclasen>	ok, so if anything is left on 2.6.x at release time, it goes back to the pools
<owen>	mclasen: Anything that didn't get fixed in the previous milestone would get thrown back into the general pool. (Presumably because it was something someone volunteered for and didn't end up having time to wokr on)
<mclasen>	I would like to try the "pool milestones" approach for the 2.8 release cycle. How do others judge it ?
<owen>	deafening silence... well, it almost has to be an improvement from what we do now :-)
<mclasen>	ok, accepted by 0/0 voices
<owen>	Another topic-- do we have any idea how much the new widgets have been tested? Should we send out an explicit poll to, say, desktop-devel-list, which asks people which of the new widgets they have used?
<mclasen>	I have no idea, but we do have the docs with the migration chapters online, and people know that the next gnome will be based on 2.6, so they should be starting to port stuff to the know apis
<mclasen>	I know anders was doing that in libgnomeui last week...
<owen>	GtkIconView is probably the biggest concern
<mclasen>	and gimp and nautilus have been ported to uimanager...
<mclasen>	owen: agreed, icon view is the weak spot
<carol>	i have this strange situation in which i am using a better gtk than everyone else
<carol>	what is going on with that patch of Sven's?
*	owen sends something to desktop-devel-list
<mclasen>	what patch ? the gobject one ? has he sent beer to Hamburg yet ? 
<carol>	heh, let me check :)
<mclasen>	honestly, I don't know whats up with gobject patches blocking on review by tim
<carol>	i should have found the bug number before i mentioned it
<mclasen>	maybe we can make a start with the "discuss bugs" agenda item next week by discussing some gobject patches
<mclasen>	the one to speed up big signal emitters has been made less urgent by my change to make gtkimagemenuitem/gtkbutton not connect one handler per instance, though
<owen>	mclasen: It would be nice to have the bugs to discuss in the agenda for the week (people could follow up and propose others)
<mclasen>	owen: sure. anyway, I have to pack my things now. Regarding releases: I want to do both 2.4.x and 2.5.x releases around mid of next week...
<mclasen>	see you
<owen>	mclasen: Sounds good. later.
<owen>	OK, ============= meeting adjourned =========================


Meeting ended November 23, 17:02 EST (22:02 UTC)



<carol>	wait, i found the bug report
<owen>	andersca: We moved hte meetings up an hour
<carol>	http://bugzilla.gnome.org/show_bug.cgi?id=143668
<carol>	i have never seen the meeting actually adjourn before
<jpe>	I'd also like to see signal emitters sped up; signal emission does show up as a hotspot in profiles
<owen>	carol: Yeah, that should be fairly unimportant for GIMP now with Matthias's GTK+ fix
<owen>	jpe: 143668 is connections not emissions
<andersca>	oh, ok
<owen>	jpe: I have some ideas how emission could be sped up, but they are a fair bit harder to implement
<carol>	i just feel bad when i am one of the few people using something that is better
<jpe>	owen, ok
<rambokid>	owen: you have put down those ideas at any place?
<owen>	carol: If you want to feel better, Matthias's fix will make an even bigger difference, so there are some people other there using something even better than what you have
<jpe>	wasn't there a patch that bypassed the emission machinary iff there's only a single handler?
<owen>	rambokid: Not recently, may have discussed them at some point with you. One thing is to make gvaluecollector.h (as used in gsignal.c anyways) directly recognize fundemental types. That's a good chunk of signal emission time
<rambokid>	owen: i don't know that idea. i'd apprechiate if you could elaborate on that (preferrably via email)
<owen>	jpe: It didn't (as I recall) quite keep all the gsignal semantics the same, which was a problem
<owen>	jpe: e.g., it didn't ref objects that passed as parameters. But it's a vague memory now...
<jpe>	owen, do you remember if the problem could be fixed?
<owen>	jpe: It didn't look like a productive line of attack to me
<owen>	jpe: Basically, cluttered the caller a lot.
<owen>	jpe: I think there is some fertile ground for speeding up the current mechanism before working on bypassing it
<rambokid>	i'm not in favour of changing the GSignal semantics in any way
<owen>	rambokid: If you remember ssp's pathc, it didn't actually change gsignal semantics, it was more along the lines of  if (g_signal_only_has_defualt_handler (object, signal)) { call default handler} else { g_signal_emit()}
<yosh>	mclasen: the attributes in *.symbols changes broke abicheck.sh
<jpe>	owen, I think the bug # is 121027
<rambokid>	owen: it was for Gtk events whose emissions aren't speed critical by any measure.
<jpe>	rambokid, I see emissions of gtk events showing up as significant in profiles
<rambokid>	jpe: i'd like to see that profile, and eventually reproduction directives, since that is contrary to any data i've seen so far.
<jpe>	couldn't something like this be done without exporting api to code outside of gsignal
<owen>	jpe: No because short-circuiting demarshal/marshal is the big step
<owen>	jpe: And that's very hard to do inside gobject
<jpe>	rambokid, it's basically when displaying a previously minimized window with a lot of sub gdk windows / gtk widgets
<jpe>	I'm testing on win32, but it's probably cross-platform
<owen>	jpe: gcc's __builtin_apply() *almost* is good enough, but not really.
<vektor>	jpe: I have a small test app that is pretty similar, but it's hard to tell how much of the overhead is the signal propagation itself and not the raw stuff.  Which profiler were you using?
*	vektor has suspicions about signal emission speed in these cases but no hard numbers.
<jpe>	owen, what is __builtin_apply() missing?  I was thinking of using it or something like it
<jpe>	vektor, glowcode (www.glowcode.com)  I'm using MS VC++ compiled code.
<rambokid>	jpe: as i said, i need hard data, not a mere suspicion. you need to correctly tell the handler execution time apart from the handling done by the gsignal code.
<owen>	I'm pretty sure it isn't legal to use from a varargs function. Also, you can't, I think, handle the fact that g_signal_emit() has a different signature then the callback - only some args are shared
<vektor>	I saw some signal-emission stuff with my little test app show up in 'qprof' but I don't trust it at all.  If anyone has any recommendations for an application and not system-level profiler, let me know.
<rambokid>	vektor: for the most part, the gsignal emission code is pretty straight in terms of executed instructions. i don't think there're many chances of major speedups (for the non-debugging cases that is) short of maybe doing even more inlining...
<jpe>	rambokid, I will freely admit I don't have hard data, but I do have a strong suspicion backed up with some profiler data
<owen>	vektor: speedprof (part of memprof in GNOME CVS) is pretty reliable as far as it goes. It doesn't give you much data, but I generally trust what it gives you
<vektor>	owen: Thanks, I'll try it out.
<rambokid>	owen: varargs handling in itself is a slow thing to begin with...
<jpe>	owen, I'll need to look at what __builtin_varargs() allows and doesn't.  There is also something similiar for VC++.
<vektor>	rambokid: OK.  We're considering doing our own closure instead of using the C closure in SWT, I'm trying to understand the performance implications of that.
<owen>	rambokid: It's not the slow part of args collection.... varargs is just some pointer arithmetic
<rambokid>	vektor: you know of gcc pre/post function instrumentation? that could be of use here, i even wrote a small profiling tool once that makes use of this (and used it on gsignal code in the beginning)
<vektor>	rambokid: No, any references?
<vektor>	hmm, interesting..
<vektor>	rambokid: OK, I think google is giving me enough to go on, thanks.
<jpe>	BTW, I agree that there would need to be a very compelling reason to complicate caller code like the rejected patch did
<rambokid>	vektor: toyprof, the code is in beats's CVS (unused by the project though), thee was even a 0.1 release, announced on gtk-devel-list (with some additional remarks, that might be of help)
<rambokid>	beast's CVS i mean
<vektor>	thanks
<rambokid>	owen: what is it you want to get at then?
<rambokid>	owen: and, varargs are expensive because you can't use the usual call optimizations with them, like passing most arguments in registers
<owen>	rambokid: on x96, you *don't* do register passing in the normal case ... it
<owen>	's not part of the ABI
<owen>	what I want to kill is all the pointer indiection and type lookups in gvaluecollector
<owen>	You could imagine essentially that each signal has a bit of bytecode attached to it that directly describes how to demarshal the args into a value array
<owen>	i don't have the exact details or timing stats at hand, but I convinced myself at one point that it would be a big win
<rambokid>	owen: i can see hardcoding stuff there for fundamental types implemented by glib. 
<owen>	rambokid: yeah, the bytecode would have an "do the dynamic lookup for this type" escape hatch
<rambokid>	owen: i'm not sure it'd be a big win though, because signals carry lots of non-fundamental types
<owen>	rambokid: you'd hvae to break encapsulation a little bit internally to libgobject and make it know about GObject
<rambokid>	owen: and you may not do COLLECT(g_type_fundamental(sigargtype)) since derived types can implement different value handling than their fundamentals (via value tables)
<owen>	rambokid: That's why you "compile" the byte code when you create the signal
<rambokid>	owen: that breakage wouldn't be the problem (just making gvaluecollector know about GObject would be enough even)
<rambokid>	owen: i'm not sure i get you there. when you say "byte code", i think of java + interpretation. is that what you talking?
<rambokid>	s/java/the java runtime model/
<owen>	rambokid: What I mean by bytecode is something that says    'get an int; get a pointer and call g_object_ref_on_it(); get another int'
<owen>	rambokid: A compact representation of the exact operations needed to demarshal the args for that signal that you can have a tight loop over.
<rambokid>	owen: that sounds overly complicated to me. i'd say, it's good enough to:
<rambokid>	a) hard code glib fundamentals so no function calls are in volved in collection
<rambokid>	b) flag signal argument types for whether those hardcoded variants may be used or whether the current collection code has to be used (that uses value tables properly)
<owen>	It might be. Would have to do some code reading to remember the issues
<rambokid>	the object ref-ing would go into the hardcoded version then. (and should become an inline atomic int operation btw)
<andersca>	gonna be fun for gtk#, they read the refcount variable iirc ;)
<rambokid>	andersca: what's going to change for them if we make inc/dec of the ref-count atomic?
<andersca>	rambokid: isn't GAtomicInt different from gint on some architectures?
<owen>	andersca: There isn't a GAtomicInt
<andersca>	ah, right
<andersca>	sorry
<owen>	andersca: We had it, then realized that g_atomic_* woudln't be useful unless it could operation on 'int' and it could every place we looked
<andersca>	owen: ah
<rambokid>	andersca: implementing the atomic funcs so that tehy can be used for GObject ref counts was one design imperative
<andersca>	rambokid: yeah, although ref_count is marked private anyway
<owen>	rambokid: The main blocker for that is just someone implemented a semi-realistic app benchmarks and doing some tests to make sure that we aren't unexpectedly killing performance by making the refcount atomic
<rambokid>	andersca: obejct bindings i think may have legitimate reasons to read it out though, so for them i'd consider it partly public ;)
<owen>	(On a smp machine, since atomic ops are basically free on UP)
<jpe>	we'll probably need a type bytecode interpreter like the one owen describes for the introspection support
<rambokid>	owen: i've just seen a comparison by stefan, that acquirtering and releasing locks works at essentially the same speed on an UP machine as on an SMP machine
<rambokid>	jpe: for me, that is too vague of a statement to make sense of it.
<owen>	rambokid: Not locks, atomic operations... my concern is that atomic operations require extra bus operations on an SMP machine
<rambokid>	owen: is your concern that this *might* be a problem, or have you seen data that this *is* a problem for refcounts? (that wasn't clear to me from your above statement)
<rambokid>	owen: locks in absence of contention are essentially atomic ops
<rambokid>	(for the glibc fast-mutex spinlocks, that is)
<owen>	rambokid: It's a statement that I'd like to see some simple benchmarking before making gobject refcounts atomic, because there it *might* be a problem
<jpe>	rambokid, introspection support will allow language bindings to call down to C functions without wrappers; see bug # 139486
<owen>	rammbokid: My expectation is that the cost is smaller than the G_IS_OBJECT() check in g_object_ref()
<owen>	rambokid: But if we don't do the timing, we can't recover in the (admittedly unlikely) case that there is a problem, because it becomes part of the API
<1000000;i++) if (foo) i++ else atomic_inc(i); ?
<owen>	rambokid: I'd rather see a GTK+ test... say, the good old 100x100 button grid. 
<rambokid>	jpe: i know what that bug is about. i don't think that being related to hard-coding the fundamental types in signal emissions though.
<rambokid>	owen: not sure which test you mean
<owen>	something that we did in the GTK+-1.0 days ... create 100x100 button table, show it, let it expose, profile off of thta
<owen>	so, in this case, just see what the effect on the time to create and expose such a table is by making refcounts atomic
<rambokid>	owen: oh, you rella ythink that could be significant there?
<rambokid>	i don't guess so, but would be interesting to be proven wrong... ;)
<jpe>	rambokid, you're probably right that they are not really related since the types of signal arguments are already known
<owen>	rambokid: I don't really guess so either, but, well, it's reasonably easy to do. Except that SMP boxes are reasonably rare these days.
<owen>	rambokid: for desktops, anyways. 
<rambokid>	yeah, my SMP box is also my server now. i guess i could run Xnest tests on it though... ;)
<owen>	BTW, did a quick valgrind --skin=callgrind test on the button grid, and the top 4 individual functions (totalling over 10%) are in gsignal.c
<yosh>	owen: well, hyperthreaded machines...
<owen>	yosh: I don't think they'll show any (hypothetical) atomic locking problems
<owen>	yosh: Because the two "processors" share the same local cache
<yosh>	ah, true
<rambokid>	owen: the 100x100 buttons? can you send that code here?
<rambokid>	too late. got my own 100x100 button grid ready by now.
<owen>	rambokid: Actuallyl, 100x100 didn't fit on screen and stressed out valgrind, so I went a little slower
<owen>	rambokd: SO I went a little slower
<owen>	I'm timing to g_signal_connect_after (window, "expose-event", G_CALLBACK(gtk_main_quit), NULL)
<owen>	(Yes, that's evil because gtk_main_quit doesn't have a boolean return value :-)
<owen>	s/slower/smaller/
<rambokid>	  g_idle_add_full (1000000, all_done_handler, NULL, NULL);                                                                                                    
<rambokid>	that handler simply does gtk_main_quit()
<rambokid>	so you get destruction handling as well. running the show 100x100 buttons test here takes 1.878s
<rambokid>	actually more like 1.938s with unpatched gsignal.c
<rambokid>	and it takes exactly the same time with atomic refcounts (on an UP)
<rambokid>	owen: hm, i don't claim to understand all the output of callgrind_annotate, but i don't see g_signal anywhere near the top for a 2x2 button window (create, show, expose, destroy)
<owen>	rambokid: Let me check my kcachegrind settings, might have not been looking at the right hting
<rambokid>	i don't have kcachegrind installed in my chroot installment, so doubt that that is significant
<rambokid>	i.e. just did valgrind --skin=callgrind .libs/simple and callgrind_annotate callgrind.out.23712
<rambokid>	where i have just valgrind and valgrind-callgrind
<owen>	I was looking with kcachegrind.... callgrind_annotate is a little obscure. Looks like I wasn't looking at the right thing
<owen>	But when I did, I'm still seeing gsiganl at the top
<owen>	Note that this is with no text in the buttons... if you put buttons in there, then freetype loading-font overhead tends to dominate
<owen>	(for smaller grids, anyways)
<owen>	s/put buttons/put labels/
<rambokid>	not text here either
<owen>	callgrind_annotate gives me a bunch of g_signal stuff at the top... 
<owen>	or at least some. What's a the top for you?
<rambokid>	2,377,792 711,274  62,373     8  1,832     0    8     5     .  ???:0x00018950 [/lib/tls/libc-2.3.2.so]
<rambokid>	/usr/X11R6/lib/libX11.so.6.2, /lib/ld-2.3.2.so are the tops ones 
<rambokid>	but then, i don't quite know what  valgrind --skin=callgrind does anyway ;)
<owen>	rambokid: Hmm, that looks like your valgrind is unhappy, really
<rambokid>	what's "unhappy" ? ;)
<owen>	Basically, it simulates the execution of your program (in the valgrind'ed jit way) and accounts each instruction reference / data reference / etc, to the calltree hierarchically
<rambokid>	the first glib one is:
<owen>	It gives somewhat distorted data because it doesn't have an accurate processor model, and does't see kernel time, X time, disk IO, etc, but...
<rambokid>	  260,333  92,843  35,128    22    204    18    8     7     1  gtype.c:IA__g_type_check_instance_cast [/usr/local/lib/libgobject-2.0.so.0.505.2]
<rambokid>	(i.e. 260k instructions as opposed to 2+1+1+1 million instructions from libc and libdl)
<owen>	Hmm, what I'm seeing first is gsignal.c:handler_insert [/usr/lib/libgobject-2.0.so.0.505.2] - which actually has about 1/3 of the istruction reference
<rambokid>	hm, i don't have handler_insert at all
<owen>	But this is the version that doesn't have matthias's don't-use-one-GtkSEttings connection per button. Should try with head
<rambokid>	ah. then you even run into the O(connections^2) complexity of handler_insert
<owen>	rambokid: Basically what I meant by "unhappy" was "not giving accurate data" - without any particular idea why. Spending that much time in libc sounds odd.
<rambokid>	i was actually working on testing/applying neo's patch today and shoved it out of the way for the button test/this conversation
<rambokid>	humpf. as much as i'd like to continue this, i have to go to bed to show up at university tomorrow morning.
<rambokid>	owen: in order to run this test, i just hacked together a quick version of gobject.c to do atomic refcounting. care to review that? (have some issues there)
<owen>	rambokid: Sure, you can mail it to me or whatever.
<rambokid>	owen: thx, email sent. night.
<owen>	night rambokid

