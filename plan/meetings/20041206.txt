Meeting on irc.gnome.org:#gtk-devel
Meeting started December 6 2004 16:05 EST (21:05 UTC)

In attendence: 

Manish Singh (yosh), 
Owen Taylor (owen), 
Matthias Clasen (mclasen), 
Jonathan Blandford (jrb),
Robert Ã–gren (roboros),
John Ehresman (jpe),
Federico Mena Quintero (federico),
Soeren Sandmann (ssp_),
Douglas Pollock (desudation),
Billy Biggs (vektor)


<mclasen>	ok, maybe we should start by talking about typeahead
<mclasen>	owen: you want to have it off by default for 2.6 ?
<owen>	I don't have a strong opinion, just thought it was something we should discuss
<mclasen>	the issue is that it catches "ordinary" keys and thus may interfere with apps, right ?
<owen>	I think that's the big issue. THere is a small issue that it (and the existing C-f search) causes selection behavior which can cause some apps to segfault. Not new bugs, but possibly more exposed bugs.
<mclasen>	do we have a separate property to turn it off (independent from the C-f search) ?
<owen>	I think jrb is away at the moment, and he's really needs to be in on this discussion
<mclasen>	ok, then we can maybe switch to the other urgent 2.6 issues until he returns
<mclasen>	I have looked at some of the bugs from billh's list of a11y bugs
<mclasen>	and have produced a patch for 111031   	nor   	Hig   	NEW   	  	gtk+   	GtkTextV   	2.6.0   	Unable to determine what character is at a point
<mclasen>	but the result confused me...ignoring "trailing" seemed to make the results worse.
<mclasen>	or maybe I am just misinterpreting the output of padraigs test case
<owen>	Without a graphical representation of the test string, it was hard for me to interpret the test results
<mclasen>	maybe we need a test case which prints out the character under the mouse on motion events
<mclasen>	that should make it relativly easy to check wether it matches or not
<mclasen>	owen: what really confused me in the output of padraigs test case with my patch was that "trailing" seems to vary more than I would expect
<mclasen>	I saw it jump from 0 to 5 or from 2 to 0...
<owen>	mclasen: it's I think the number of bytes to the end of the cluster, so 0 => 5 isn't suprising
<mclasen>	if it is a number of bytes, then isn't calling forward_chars(iter, trailing) wrong ?
<mclasen>	thats what GtkTextLayout does...
<owen>	Maybe it's number of chars. I forget.
<owen>	5 is a little long, but not impossible for hindi
<mclasen>	I'll try to debug this a bit more over the next few days
<mclasen>	the next bug we need to discuss is
<mclasen>	160063   	nor   	Hig   	UNCO   	  	gtk+   	GtkTreeV   	2.6.0   	gtk_list_store_sort_iter_changed() no longer emits rows_r...
Dec 06 16:17:59 *	jrb returns
<mclasen>	the problem here is that after the port to GtkSequence, said function no longer emits rows_reordered, but only row_changed
<mclasen>	even if it is moved to a different position
<mclasen>	this is a change of behaviour that broke e.g. the icon view on sorted models, and can conceivably break apps which do similar things
<mclasen>	but adding back the rows_reordered would be rather bad, since it forces the list store to be O(n^2), basically
<ssp_>	Would it be possible to emit delete/insert instead of row_changed?
<mclasen>	that would work for the icon view problem. not sure if it breaks row references tracking the row, though
<mclasen>	ah, yes, I think it does (dnd has the same problem)
<mclasen>	any other options ? we could add a flag to switch the behaviour...
<jrb>	mclasen: I don't think we can change this behavior
<owen>	Is the rows_reordered => O(n^2) fundemental?
<ssp_>	Nautilus has been "broken" like this for a long time
<ssp_>	owen: yes, rows_reordered is O(n). There is no way around it
<owen>	How so? 
<mclasen>	owen: well, rows_reordered has to include a full map old positions -> new positions
<jrb>	ssp_: that's how we did DnD, and it was suboptimaal
<owen>	Well, O(n) isn't the same as O(n^2)
<ssp_>	owen: you could try and batch inserts together, of course
<mclasen>	owen: it is O(n) for each insert, so if you fill in n items, you get O(n^2)
<owen>	Hmmm, well, in the past filling a sorted list store didn't give reasonable performance, does this fix it, or is it just one of many O(n)?
<mclasen>	owen: I guess the sequence changed most of the n's to log n's
<ssp_>	owen: It made basically everything that could be O(log n) O(log n)
<ssp_>	owen: Then someone found basically the same problem with swap(), so that had to be made O(n)
<owen>	ssp_: That doesn't really answer the question :-) -- is filling a sorted list store now O(n log n) ?
<ssp_>	owen: yes
<ssp_>	owen: I meant everything that could theoretically be O(log n) became O(log n)
<mclasen>	we are optimal now...
<ssp_>	except for swap ...
<owen>	what is swap used for?
<mclasen>	what jrb pointed out is that we really should have an insert_with_values() which would allow to avoid most of the issue
<mclasen>	when filling up a sorted model
<mclasen>	since you currently have to append the iter, then set the values as a separate step, which resorts it
<ssp_>	owen: it swaps to rows
<jrb>	mclasen: I'd much prefer that
<owen>	Does it? If you aren't appending in sorted order, it just chnages the prefactor, right?
<jrb>	owen: you get a row_inserted for the listener 
<jrb>	owen: which means you don't ened to go through the whole level
<mclasen>	owen: if you insert the item in the right position, you never need to emit rows_reordered
<owen>	jrb: Ah
<jrb>	mclasen: we should have that function anyway
<jrb>	mclasen: someday, I'll find a spare couple months to write a new TreeModel interface.....
<owen>	jrb:Could we get away with insert_row() giving back some magic iter that didn't change the model unitl you set it?
<owen>	(probably not, inserting blank rows is legitimate :-()
<mclasen>	owen: we could arrange it so that the magic blank row becomes a regular blank row when you do anything else to the model...
<owen>	could we do the delete/insert only for the case of deleting a blank row at the end, and make blank rows sort at the end?
<mclasen>	owen: but it is probably easier to add insert_with_values()
<jrb>	mclasen: we'll need to make sure we have a language binding friendly version too
<mclasen>	yes
<mclasen>	owen: the delete/insert would still break row references
<mclasen>	owen: I don't know why someone would have a row reference to a just added blank row, but still...
<owen>	mclasen: Why do we need a row reference to an empty row at the end of the store?
<owen>	mclasen: It's not "broken" in the sense of "broken invariants", just in the sense of "can't track the move"
<jrb>	owen: you're adding it to modify later?
<owen>	Hmm.
<ssp_>	crazy idea: what if the array emitted by rows_reordered contained an extra field "behind" the pointer that indicated the first non-identity field?
<owen>	ssp_: How do you generate the array in non-O(n)? Just keep around a prefilled one and modify it?
<mclasen>	ssp_: would that make the signal emission any more efficient ?
<ssp_>	owen: yeah
<ssp_>	mclasen: does the signal emission copy the array currently?
<mclasen>	ssp_: doesn't seem to (see gtktreemodel.c:rows_reordered_marshal)
<ssp_>	Just adding an extra field wouldn't be enough though. Moving a row still generates O(n) non-identity entries
<ssp_>	But adding information "only one row moves: from pos m to n" could possibly work
<mclasen>	ssp_: that would allow users of the signal to avoid a lot of work, but wouldn't make the signal any faster to send, right ?
<mclasen>	we could just as well add a new signal, row_moved, and let apps use that in preference to rows_reordered
<ssp_>	mclasen: right, we still have to actually generate the O(n) entries to be compatible
<owen>	mclasen: While you could check for listeners on rows_reordered, that's rather evil
<mclasen>	it sucks to have an interface that  inefficient by definition...
<mclasen>	owen: the alternative would be to make apps declare explicitly that they're not interested in rows_reordered
<owen>	That strikes me as unsafe, because an app doesn't really know that *nobody* is interested in rows_reordered
<owen>	g_signal_has_handler_pending() while evil, would be better than that
<mclasen>	hmm, true
<jrb>	mclasen: except that's not what you want
<mclasen>	owen: if we go for the evil approach, would you add a new row_moved signal to emit instead/in addition to rows_reordered ?
<jrb>	mclasen: you want to know when it is reordered, eg, when the sort function changes
<ssp_>	If we add the evil call, we could also use it to short-circuit expose/size-allocate/size-request
<owen>	Some sort of new signal... not sure if it should just be one-row or any number
<mclasen>	jrb: so you're saying has_handler_pending() doesn't work either, because there will be listeners even if we don't need the rows_reordered signal from sort_iter_changed() ?
<jrb>	mclasen: I'm saying you need the handler.  Just not in all cases
<owen>	ssp_: No, it exists. It doesn't tell you class closures though.
<mclasen>	hmm, so, what is the outcome of this discussion ?
<mclasen>	1) we need to readd the rows_reordered() signal in sort_iter_changed()
<mclasen>	2) would be good to have some insert_with_values() lookalike with language-binding sugar
<mclasen>	3) not clear if we can find a way to avoid the rows_reordered overhead...
<mclasen>	ok, maybe we should get back to the first issue, now that jrb is back
<jrb>	mclasen: concur with the summary.
<mclasen>	jrb: what about typeahead off by default ? do you agree, or oppose, and why ?
<jrb>	mclasen: I think it should be on by default, as people won't turn it on.
<jrb>	and if we were doing it from start, we'd have the search on by default
<mclasen>	the filechooser would turn it on, of course
<jrb>	mclasen: however, it has broken slightly some applications
<mclasen>	thats the main argument for off by default...
<jrb>	mclasen: yeah
<jrb>	mclasen: iff the TreeView has focus, and the application has a one key mnemonic (such as evo)
<jrb>	mclasen: it goes to the typeahead
<desudation>	I have concerns about it swallowing key events.
<jrb>	(both federico and vektor commented on this)
<mclasen>	what did they say ?
<jrb>	mclasen: that they were surprised. (-;  Hopefully they'll wake up and answer in their own words
<desudation>	We (SWT/Eclipse) would be happy if we could turn it off with some kind of API call/property.
<jrb>	desudation: you already can
<mclasen>	gtk_tree_view_set_enable_search ?
<mclasen>	does that influence only typeahead, or also C-f ?
<desudation>	Okay.  That's good.
<jrb>	both
<mclasen>	do we need a separate flag ? 
<desudation>	In terms of design, we also find it a bit weird that it is positioned off the bottom right of the widget.  It isn't necessarily where the user is working, and our i18n guy is worried about how this will interact with IME positioning.
<federico>	did my mail about enabling typeahead make it to the list?
<mclasen>	federico: didn't see it
<federico>	hmmm
<federico>	give me a sec
<mclasen>	desudation: there is a bug about it, from the eclipse team, I think
<desudation>	We are also a bit worried that this feature is being backported by some distributions into patched versions of GTK+ 2.4.x
<desudation>	mclasen: Yes, we filed a bug about the positioning.
<desudation>	mclasen: I'm not sure that we have about the eating of key events.
<federico>	argh, it's in my Drafts folder
<jrb>	desudation: note that we added the entry mostly for i18n
<federico>	basically
<federico>	Evolution doesn't like typeahead because it has single-letter commands
<federico>	I don't know how it implements them --- gtktreeview's key_press_event handler looks like 
<federico>	if (arrow_key) { ...}
<desudation>	jrb: I realize this, and it is a good idea.  But, the location of the typeahead seems off somehow....
<mclasen>	desudation: I don't think we can do something about the positioning for 2.6
<federico>	else if (parent_handler_handles (event)) return;
<federico>	else handle_typeahead()
<federico>	but Evolution doesn't derive from the treeview, so I don't know how it manages to catch the keys before the tree does
<desudation>	mclasen: What about the eating of key events?  Would it be possible for the key events to be forwarded to listeners on the tree/table widget before sending them to the typeahead?
<mclasen>	jrb: was C-f enabled by default in 2.4 ?
<jrb>	mclasen: it's always been on
<federico>	could we make the typeahead entry a) appear over the row that matches, directly above the corresponding renderer; b) make the tree center the row as you type?
<mclasen>	federico: I think it would be annoying to have the entry covering the selected row
<jrb>	federico: it would jump around, no?
<mclasen>	or do you mean "over" as in "next to it"
<jrb>	might be interesting to appear below the last line on lists that aren't full
<federico>	mclasen: some nice kind of "over" :)  you could alpha-blend it in the future over the actual row, or whatever
<desudation>	jrb: Arguably, the typeahead shouldn't appear if all of the lines can be displayed.
<federico>	mclasen: but in general, make it appear fairly close to the found row
<mclasen>	jrb: if C-f has always been on, then I would propose to add a separate flag for turning on typeahead, and make it default to off
<jrb>	desudation: it scrolls
<jrb>	mclasen: no one ever found c-f
<federico>	(why do we need the entry at all?  what was the problem with making it invisible?)
<jrb>	mclasen: that's why we added typeahead
<jrb>	federico: partial inputs
<mclasen>	jrb: hmm, you have a point
<federico>	jrb: is there a way to know whether the user's language requires that?
<jrb>	(technically, you could type that char in any language...)
<mclasen>	ok, I have some more bugs which I would like to get some input on before I have to leave...
<mclasen>	here is one: 160271   	nor   	Hig   	UNCO   	  	glib   	general   	2.6.0   	g_get_language_names() always returns the same list
<federico>	(side note... do we have gtk_tree_view_set_text_when_empty (tree, "No items")?)
<mclasen>	the reporter complains that g_get_language_names() always returns the same list of names, and provides a patch to update the returned list if the locale changes
<mclasen>	is this something we need to handle ? We do handle it for get_encoding()...
<mclasen>	federico: we don't have that in most places (e.g combo boxes, menus)
<mclasen>	federico: we only have it in ui manager for empty menus now
<mclasen>	ok, I will have to break off in a few minutes...
<mclasen>	My plan for the next releases is to get something out at the beginning of next week
<mclasen>	I hope we can resolve most of the mustfix issues by then (ie what is on the 2.6 milestone with high prio)
<mclasen>	If not, we may either do another 2.5.x release and continue fixing for another week, or just add the issues to the release notes and do a 2.6 anyway
<mclasen>	how does cvs HEAD currently look on win32 ? have the filename encoding issues been completely resolved by now ?
<mclasen>	ok, have to go. see you next week
<federico>	see you


Meeting ended December 6, 17:30 EST (22:30 UTC)
